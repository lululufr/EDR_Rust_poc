[package]
name = "agent"
version = "0.1.0"
edition.workspace = true

license.workspace = true

[dependencies]
agent-common = { path = "../agent-common", features = ["user"] }
reqwest = { version = "0.12", features = ["json", "rustls-tls"] }
hostname = "^0.4"
chrono = "^0.4"
tungstenite = "0.27.0"
url = "2.5.7"
anyhow = { workspace = true, default-features = true }
aya = { workspace = true }
aya-log = { workspace = true }
bytes = "1.10.1"
env_logger = { workspace = true }
libc = { workspace = true }
log = { workspace = true }
serde_json = { version = "1", default-features = true }
tokio = { workspace = true, features = [
    "macros",
    "rt",
    "rt-multi-thread",
    "net",
    "signal",
] }
once_cell = "1.21.3"
[build-dependencies]
anyhow = { workspace = true }
aya-build = { workspace = true }
# TODO(https://github.com/rust-lang/cargo/issues/12375): this should be an artifact dependency, but
# it's not possible to tell cargo to use `-Z build-std` to build it. We cargo-in-cargo in the build
# script to build this, but we want to teach cargo about the dependecy so that cache invalidation
# works properly.
#
# Note also that https://github.com/rust-lang/cargo/issues/10593 occurs when `target = ...` is added
# to an artifact dependency; it seems possible to work around that by setting `resolver = "1"` in
# Cargo.toml in the workspace root.
#
# Finally note that *any* usage of `artifact = ...` in *any* Cargo.toml in the workspace breaks
# workflows with stable cargo; stable cargo outright refuses to load manifests that use unstable
# features.
agent-ebpf = { path = "../agent-ebpf" }

[[bin]]
name = "agent"
path = "src/main.rs"
